# -*- coding: utf-8 -*-
"""Seminário01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EQc9WI2yVkbCTZzWW6gA6DcZCSq5anV8
    
#author: Caroline Santos Corrêia

Vamos implementar o algoritmo de cálculo do centro de massa de polígonos. Trabalharemos apenas com o caso 2D.

Faremos isso da seguinte forma: dado um polígono $P$ com $n$ vértices, vamos repartí-lo em $n$ triângulos, partindo de um ponto arbitrário (escolhemos a origem). Após determinar o baricentro de cada triângulo e suas áreas, somos capazes de encontrar o centro de massa do polígono. 

Vamos ao código:
"""

from numpy import * 
import numpy as np
from matplotlib.pyplot import *

"""Primeiro, criamos uma função para determinar baricentros de triângulos. 

Recebemos um vetor $T$ com as coordenadas do triângulo cujo baricentro pretendemos encontrar. $T$ é uma lista de vetores. Uma vez que se trata de um triângulo, teremos 3 vetores de 2 coordenadas cada.
"""

def baricentro(T):
	B = []
	
	x = 0
	y = 0
	
	for v in T:
		x += float(v[0])
		y += float(v[1])

	B.append(x/3)
	B.append(y/3)	
			
	return(B)

"""Agora, precisamos de uma função para calcular as áreas destes triângulos e faremos isso através do determinante, como explicado anteriormente:"""

def area(T):
	w = []
	Q = []
	
	for v in T:
		w = []
		w.append(float(v[0])) 
		w.append(float(v[1]))
		Q.append(w)
		
	Q = [[z[0],z[1],1.0] for z in Q]
	a = np.array(Q)
	
	#print(Q)
	
	return(np.linalg.det(a)/2)

"""Uma vez criadas as funções, vamos receber os dados do polígono:"""

n = input("Número de vértices do polígono:\n")

P = []

for i in range(int(n)):
	v = []
	x,y = input().split(' ')
	v.append(float(x))
	v.append(float(y))
	P.append(v)

#cria os vetores com as coordenadas x e y	
Px = [w[0] for w in P]
Py = [w[1] for w in P]

#adiciona o primeiro ponto do polígono ao final do vetor, para fechar 
Px.append(Px[0])
Py.append(Py[0])

plot(Px,Py, 'r.-')

"""Agora, precisamos criar os triângulos que tornarão possível a determinação do centro de massa.


Note que um dos vértices dos triângulos é a origem, porque escolhemos este ponto para começar a desenhar os triângulos. O ordem é a seguinte: $\text{origem}, \text{vértice}_i, \text{vértice}_{i+1}$, até que acabem os vértices. Quando chegar ao último, voltamos o primeiro (vetor circular). Dessa forma, conseguimos percorrer toda a área do polígono com os triângulos.
"""

TRI = []

for i in range(int(n)):
	v = []
	v.append([0.0,0.0])
	v.append(P[i])
	v.append(P[(i+1)%int(n)])
	TRI.append(v)
  
Tx = []
Ty = []
  
for T in TRI:
  Tx.append([w[0] for w in T])
  Ty.append([w[1] for w in T])

plot(Px,Py, 'r.-')

#Observe como os triângulos são montados:

plot(Tx[0],Ty[0], 'r--')
plot(Tx[1],Ty[1], 'b--')
plot(Tx[2],Ty[2], 'm--')
plot(Tx[3],Ty[3], 'k--')
plot(Tx[4],Ty[4], 'p--')

"""Vamos passar as informações dos triângulos para as funções e calcular seus respectivos baricentros e áreas:"""

soma_area = 0
wp = [0,0]


for i in range(int(n)):
  AREA = area(TRI[i])
  BARICENTRO = baricentro(TRI[i])
  print("Área do triângulo %d: %.2f" % (i+1,AREA))
	
  wp[0] += AREA*BARICENTRO[0]
  wp[1] += AREA*BARICENTRO[1]

  soma_area += AREA

print('\n')
  
print("Área Total: %.2f" % (soma_area))

"""E, finalmente, o centro de massa do polígono:"""

CM = [0,0]
CM[0] = wp[0]/soma_area
CM[1] = wp[1]/soma_area

print("Centro de massa do polígono: (%.2f,%.2f)" % (CM[0],CM[1]))
#print(soma_area)

plot(Px,Py, 'b.-')
plot(CM[0],CM[1], 'r.')

"""Vamos obter, também, o momento de inércia desse mesmo polígono. Note que vamos girá-lo no plano 2D. Então, o resultado do momento de inércia é um escalar, porque só existe um jeito de girar:"""

soma = 0

#aqui que o momento é calculado, conforme explicado nas notas do seminário 01.
for i in range(int(n)-1):
	soma += (Px[i]*+Py[i+1]-Px[i+1]*Py[i])*(Px[i]*Py[i+1]+2*+Px[i]*Py[i]+2*+Px[i+1]*Py[i+1]+Px[i+1]*Py[i])
	
print("Momento de inércia total: %.2f kg.m^2" % (soma/24))
